{"version":3,"file":"lib.min.js","sources":["../src/lib.js"],"sourcesContent":["/**\n *\n * @module      mod_nextblocks/lib\n * @copyright   2025 Rui Correia<rjr.correia@campus.fct.unl.pt>\n * @copyright   based on work by 2024 Duarte Pereira<dg.pereira@campus.fct.unl.pt>\n * @license     https://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n/* globals Blockly */\n\ndefine(['mod_nextblocks/codestring', 'mod_nextblocks/codestringPython', 'core/str'], function(CodeString, CodeStringPython, str) {\n        /**\n         * @param {BlockSvg} block the block whose code is to be generated\n         * @returns {string} the code generated by Blockly for the given block\n         */\n        function generateFunctionCode(block) {\n            Blockly.JavaScript.blockToCode(block);\n            // Get function name\n            let functionName = '%' + Blockly.JavaScript.nameDB_.getName(block.getFieldValue('NAME'),\n                Blockly.Procedures.NAME_TYPE);\n            functionName = functionName.substring(0, functionName.length - 1);\n            return Blockly.JavaScript.definitions_[functionName] + '\\n';\n        }\n\n    /**\n     * @param {BlockSvg} block the block whose code is to be generated\n     * @returns {string} the code generated by Blockly for the given block\n     */\n    function generateFunctionCodePython(block) {\n        Blockly.Python.blockToCode(block);\n        // Get function name\n        let functionName = '%' + Blockly.Python.nameDB_.getName(block.getFieldValue('NAME'),\n            Blockly.Procedures.NAME_TYPE);\n        functionName = functionName.substring(0, functionName.length - 1);\n        return Blockly.Python.definitions_[functionName] + '\\n';\n    }\n\n        /**\n         * @param {BlockSvg} block the block whose descendants are to have their code generated\n         * @returns {string} the code generated by Blockly for the descendants of the given block\n         */\n        function generateDescendantsCode(block) {\n            let descendantsCode = '';\n            block.getChildren(true).forEach((child) => {\n                descendantsCode += Blockly.JavaScript.blockToCode(child);\n            });\n            return descendantsCode;\n        }\n\n    /**\n     * @param {BlockSvg} block the block whose descendants are to have their code generated\n     * @returns {string} the code generated by Blockly for the descendants of the given block\n     */\n    function generateDescendantsCodePython(block) {\n        let descendantsCode = '';\n        block.getChildren(true).forEach((child) => {\n            descendantsCode += Blockly.Python.blockToCode(child);\n        });\n        return descendantsCode;\n    }\n\n        return {\n            /**\n             * @param {String} code The Javascript code to be run\n             * @returns {any} The output of the code\n             * Runs the code and returns the output, does not display it\n             * TODO: do something other than use eval\n             */\n            silentRunCode: async function(code) {\n                /* eslint-disable no-eval */\n                const result = await eval(code);\n                return typeof result === 'undefined' ? code : result;\n            },\n\n            /**\n             * Formats the code with correct HTML structure to be displayed in the code div\n             * @param {CodeString} code the code text to be formatted (string literal)\n             * @param {boolean} debugMode whether to display the code as is, or with the wrapper function\n             * @returns {string} the formatted code\n             */\n            formatCodeHTML: (code, debugMode = false) => {\n                if (!debugMode) {\n                    return '<pre>' + code.getPrintableCodeString() + '</pre>';\n                } else {\n                    return '<pre>' + code.getCompleteCodeString() + '</pre>';\n                }\n            },\n\n            /**\n             * Formats the code with correct HTML structure to be displayed in the code div\n             * @param {CodeStringPython} code the code text to be formatted (string literal)\n             * @param {boolean} debugMode whether to display the code as is, or with the wrapper function\n             * @returns {string} the formatted code\n             */\n            formatPythonCodeHTML: (code, debugMode = false) => {\n                if (!debugMode) {\n                    return '<pre>' + code.getPrintableCodeString() + '</pre>';\n                } else {\n                    return '<pre>' + code.getCompleteCodeString() + '</pre>';\n                }\n            },\n\n            /**\n             * Inserts the test results accordion in the area above the Run and Tests buttons\n             * @param {any[]|null} results the outputs of the tests\n             * @param {{}} testsJSON the tests that were run (for displaying the inputs and outputs)\n             * Note: if this is not empty, results is null\n             * @returns {string} the HTML for the accordion\n             */\n            testsAccordion: async function(results, testsJSON) {\n                const testCaseCount = testsJSON.length;\n                let accordion = '<div class=\"d-flex flex-wrap\" style=\"max-height: 100%; overflow-y: auto;\">';\n                let strtest = await str.get_string('test', 'mod_nextblocks');\n                let strtestnotrun = await str.get_string('testnotrun', 'mod_nextblocks');\n                let strtesterror = await str.get_string('testerror', 'mod_nextblocks');\n                let strtestpassed = await str.get_string('testpassed', 'mod_nextblocks');\n                let strtestfailed = await str.get_string('testfailed', 'mod_nextblocks');\n                let strtestinput = await str.get_string('testinput', 'mod_nextblocks');\n                let strexpectedtestoutput = await str.get_string('expectedtestoutput', 'mod_nextblocks');\n                let stryouroutput = await str.get_string('youroutput', 'mod_nextblocks');\n                for (let i = 0; i < testCaseCount; i++) {\n                    accordion += '<div class=\"card m-2\" style=\"flex: 1 1 calc(25% - 20px); min-width: 250px;\">';\n                    accordion += '<details class=\"card-body\">';\n                    accordion += '<summary class=\"card-header\" style=\"border-bottom: none;\">';\n                    accordion += strtest + (i + 1);\n\n                    if (results === null || results[i] === undefined) {\n                        accordion += '<span class=\"badge badge-warning float-right\">' + strtestnotrun + '</span>';\n                    } else if (results[i].includes(\"Error\")) {\n                        accordion += '<span class=\"badge badge-warning float-right\" style=\"color: black !important;\">'\n                            + strtesterror + '</span>';\n                    } else if (results[i] === testsJSON[i].output) {\n                        accordion += '<span class=\"badge badge-success float-right\" style=\"color: green !important;\">'\n                            + strtestpassed + '</span>';\n                    } else {\n                        accordion += '<span class=\"badge badge-danger float-right\" style=\"color: red !important;\">'\n                            + strtestfailed + '</span>';\n                    }\n                    accordion += '</summary>';\n\n                    accordion += '<div class=\"pt-2\" style=\"background-color: white !important;\">';\n                    /* eslint-disable no-loop-func */\n                    testsJSON[i].inputs.forEach((input) => {\n                        const prompt = Object.keys(input)[0];\n                        const values = Object.values(input[prompt])[0];\n                        const combination = [prompt].concat(values);\n\n                        let inputString = \"\";\n                        for (const v of combination) {\n                            inputString += v;\n                            inputString += \"\\n\";\n                        }\n\n                        accordion += '<p class=\"pt-2 m-0\">' + strtestinput + '</p>';\n                        accordion += '<pre class=\"mt-1 mb-0 test-input\">' + inputString + '</pre>';\n                    });\n                    accordion += '<p class=\"pt-2 mt-2 mb-0\">' + strexpectedtestoutput + '</p>';\n                    accordion += '<pre class=\"mt-1 mb-0 test-output\">' + testsJSON[i].output + '</pre>';\n                    accordion += '<div class=\"p-0\">';\n                    accordion += '<p class=\"pt-2 m-0\">' + stryouroutput + '</p>';\n                    if (results === null) {\n                        accordion += '<pre class=\"mt-1 mb-0 test-output\">' + strtestnotrun + '</pre>';\n\n                    } else if (results[i].includes(\"Error\")) {\n                        accordion += '<pre class=\"mt-1 mb-0 test-output\" style=\"color: red !important;\">' +\n                            results[i] + '</pre>';\n                    } else {\n                        accordion += '<pre class=\"pb-2 mt-1 mb-0 test-output\">' + results[i] + '</pre>';\n                    }\n                    accordion += '</div>';\n                    accordion += '</div>';\n                    accordion += '</details>';\n                    accordion += '</div>';\n                }\n\n                accordion += '</div>';\n                return accordion;\n            },\n\n            /**\n             * Changes the code to correctly output execution errors\n             * @param {CodeString} code the code text to be formatted (string literal)\n             * @returns {string} the formatted code\n             */\n            errorPrevention: (code) => {\n                let strerrormaxtime = \"\";\n                str.get_string('errormaxtime', 'mod_nextblocks').then(function(text) {strerrormaxtime = text;});\n                // Avoid infinite loops\n                code = code.replace(/((?:while|for)\\s*\\([^)]*\\)\\s*\\{)/g,\n                    \"$1\\nif(loopIterations++>MAX_ITERATIONS) return outputString = \" +\n                    \"\\\"\" + strerrormaxtime + \"\\\";\");\n\n                return code;\n            },\n\n            /**\n             * Runs the tests on the given workspace and returns an array of booleans, one for each test, indicating whether\n             * the test passed or not\n             * @param {String} code the workspace to run the tests on\n             * @param {{}} tests the tests to run\n             * @returns {String[]} the output of each test\n             */\n            runTests: async function(code, tests) {\n                let results = [];\n                code = code.replace(\"runningTests = false;\", \"runningTests = true;\");\n\n                code = this.errorPrevention(code);\n\n                for (const test of tests) {\n                    let thisTestCode = code; // Need to copy, so that the code is not modified for the next test\n                    const inputs = test.inputs;\n                    for (const input of inputs) {\n                        const prompt = Object.keys(input)[0];\n                        const values = Object.values(input[prompt])[0];\n\n                        const combination = [prompt].concat(values);\n\n                        thisTestCode = thisTestCode.replace(\"const testInputs = [];\",\n                            \"const testInputs = [\" + combination.toString() + \"];\");\n\n                    }\n                    let codeOutput = await this.silentRunCode(thisTestCode);\n                    codeOutput = codeOutput.trim();\n                    results.push(codeOutput);\n                }\n                return results;\n            },\n\n            /**\n             * @param {WorkspaceSvg} workspace the workspace to get the code from\n             * @param {string} inputFuncDecs\n             * @returns {CodeString} the code generated by Blockly for the current workspace\n             *\n             * Returns the Javascript code string generated by Blockly, with the necessary wrapping code\n             */\n            getWorkspaceCode: function(workspace, inputFuncDecs) {\n                Blockly.JavaScript.addReservedWords('print, input');\n                let codeString = new CodeString();\n\n                codeString.addAuxFunctions(inputFuncDecs);\n\n                const functionOpen = 'await (async () => {';\n                codeString.addLine(functionOpen);\n\n                let blocks = workspace.getTopBlocks(true);\n                for (let b = 0; b < blocks.length; b++) {\n                    const block = blocks[b];\n                    if (block.type === 'start') {\n                        codeString.addMainCode(generateDescendantsCode(block));\n                    } else if (block.type === 'procedures_defnoreturn' || block.type === 'procedures_defreturn') {\n                        codeString.addFunction(generateFunctionCode(block));\n                    }\n                }\n                codeString.addEnding();\n                return codeString;\n            },\n\n            /**\n             * @param {WorkspaceSvg} workspace the workspace to get the code from\n             * @param {string} inputFuncDecs\n             * @returns {CodeStringPython} the code generated by Blockly for the current workspace\n             *\n             * Returns the Python code string generated by Blockly, with the necessary wrapping code\n             */\n            getWorkspaceCodePython: function(workspace, inputFuncDecs) {\n                Blockly.Python.addReservedWords('print, input, text_ask');\n                let codeString = new CodeStringPython();\n\n                codeString.addAuxFunctions(inputFuncDecs);\n\n                const functionOpen = 'await (async () => {';\n                codeString.addLine(functionOpen);\n\n                let blocks = workspace.getTopBlocks(true);\n                for (let b = 0; b < blocks.length; b++) {\n                    const block = blocks[b];\n                    if (block.type === 'start') {\n                        codeString.addMainCode(generateDescendantsCodePython(block));\n                    } else if (block.type === 'procedures_defnoreturn' || block.type === 'procedures_defreturn') {\n                        codeString.addFunction(generateFunctionCodePython(block));\n                    }\n                }\n                codeString.addEnding();\n                return codeString;\n            },\n        };\n});\n"],"names":["define","CodeString","CodeStringPython","str","generateFunctionCode","block","Blockly","JavaScript","blockToCode","functionName","nameDB_","getName","getFieldValue","Procedures","NAME_TYPE","substring","length","definitions_","generateFunctionCodePython","Python","generateDescendantsCode","descendantsCode","getChildren","forEach","child","generateDescendantsCodePython","silentRunCode","code","result","eval","formatCodeHTML","debugMode","arguments","undefined","getPrintableCodeString","getCompleteCodeString","formatPythonCodeHTML","testsAccordion","results","testsJSON","testCaseCount","accordion","strtest","get_string","strtestnotrun","strtesterror","strtestpassed","strtestfailed","strtestinput","strexpectedtestoutput","stryouroutput","i","includes","output","inputs","input","prompt","Object","keys","values","combination","concat","inputString","v","errorPrevention","strerrormaxtime","then","text","replace","runTests","tests","test","thisTestCode","toString","codeOutput","trim","push","getWorkspaceCode","workspace","inputFuncDecs","addReservedWords","codeString","addAuxFunctions","functionOpen","addLine","blocks","getTopBlocks","b","type","addMainCode","addFunction","addEnding","getWorkspaceCodePython"],"mappings":"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"}