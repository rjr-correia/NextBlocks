{"version":3,"file":"lib.min.js","sources":["../src/lib.js"],"sourcesContent":["/**\n *\n * @module      mod_nextblocks/lib\n * @copyright   2023 Duarte Pereira<dg.pereira@campus.fct.unl.pt>\n * @license     https://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n/* globals Blockly */\n\n/* globals javascript */\n\ndefine(['mod_nextblocks/codestring'], function(CodeString) {\n    /**\n     * @param {BlockSvg} block the block whose code is to be generated\n     * @returns {string} the code generated by Blockly for the given block\n     */\n    function generateFunctionCode(block) {\n        Blockly.JavaScript.blockToCode(block);\n        // Get function name\n        let functionName = '%' + javascript.javascriptGenerator.nameDB_.getName(block.getFieldValue('NAME'),\n            Blockly.Procedures.NAME_TYPE);\n        functionName = functionName.substring(0, functionName.length - 1);\n        return javascript.javascriptGenerator.definitions_[functionName] + '\\n';\n    }\n\n    /**\n     * @param {BlockSvg} block the block whose descendants are to have their code generated\n     * @returns {string} the code generated by Blockly for the descendants of the given block\n     */\n    function generateDescendantsCode(block) {\n        let descendantsCode = '';\n        block.getChildren(true).forEach((child) => {\n            descendantsCode += Blockly.JavaScript.blockToCode(child);\n        });\n        return descendantsCode;\n    }\n\n    /**\n     * @param {String} input the code to extract the function names from\n     * @returns {String[]} the names of the functions declared in the given code\n     */\n    function extractFunctionNames(input) {\n        const regex = /function\\s+(\\w+)\\s*\\(/g;\n        const functionNames = [];\n        let match;\n\n        while ((match = regex.exec(input)) !== null) {\n            functionNames.push(match[1]);\n        }\n\n        return functionNames;\n    }\n\n    return {\n        /**\n         * @param {String} code The Javascript code to be run\n         * @returns {any} The output of the code\n         * Runs the code and returns the output, does not display it\n         * TODO: do something other than use eval\n         */\n        silentRunCode: async function(code) {\n            /* eslint-disable no-eval */\n            const result = await eval(code);\n            return typeof result === 'undefined' ? code : result;\n        },\n\n        /**\n         * Formats the code with correct HTML structure to be displayed in the code div\n         * TODO: implement this function\n         * @param {CodeString} code the code text to be formatted (string literal)\n         * @param {boolean} debugMode whether to display the code as is, or with the wrapper function\n         * @returns {string} the formatted code\n         */\n        formatCodeHTML: (code, debugMode = false) => {\n            if (!debugMode) {\n                return '<pre>' + code.getPrintableCodeString() + '</pre>';\n            } else {\n                return '<pre>' + code.getCompleteCodeString() + '</pre>';\n            }\n        },\n\n        /**\n         * Inserts the test results accordion in the area above the Run and Tests buttons\n         * @param {any[]|null} results the outputs of the tests\n         * @param {{}} testsJSON the tests that were run (for displaying the inputs and outputs)\n         * @param {String[]} uncalledInputFuncs the input functions that were not called.\n         * Note: if this is not empty, results is null\n         * @returns {string} the HTML for the accordion\n         */\n        testsAccordion: function(results, testsJSON, uncalledInputFuncs) {\n            const testCaseCount = testsJSON.length;\n            let accordion = '<div class=\"d-flex flex-wrap\" style=\"max-height: 100%; overflow-y: auto;\">';\n\n            if (results === null) {\n                accordion += '<div class=\"alert alert-warning w-100\" role=\"alert\">';\n                accordion += 'Not all input functions were called. No tests will be executed.';\n                accordion += '<br>Input functions not called: ' + uncalledInputFuncs.join(', ');\n                accordion += '</div>';\n            }\n\n            for (let i = 0; i < testCaseCount; i++) {\n                accordion += '<div class=\"card m-2\" style=\"flex: 1 1 calc(25% - 20px); min-width: 250px;\">';\n                accordion += '<details class=\"card-body\">';\n                accordion += '<summary class=\"card-header\">';\n                accordion += 'Test ' + (i + 1);\n\n                if (results === null || results[i] === undefined) {\n                    accordion += '<span class=\"badge badge-warning float-right\">Not run</span>';\n                } else if (results[i] === testsJSON[i].output) {\n                    accordion += '<span class=\"badge badge-success float-right\">Passed</span>';\n                } else {\n                    accordion += '<span class=\"badge badge-danger float-right\">Failed</span>';\n                }\n                accordion += '</summary>';\n\n                accordion += '<div class=\"pt-2\" style=\"border: 1px solid #ddd !important; background-color: white !important;\">';\n                /* eslint-disable no-loop-func */\n                testsJSON[i].inputs.forEach((input) => {\n                    for (const key in input) {\n                        accordion += '<p class=\"pt-2 m-0\">' + key + ': </p>';\n                        accordion += '<pre class=\"mt-1 mb-0 test-input\">' + Object.values(input[key])[0][0] + '</pre>';\n                    }\n                });\n                accordion += '<p class=\"pt-2 border-top mt-2 mb-0\">Test output: </p>';\n                accordion += '<pre class=\"mt-1 mb-0 test-output\">' + testsJSON[i].output + '</pre>';\n                accordion += '<div class=\"p-0\">';\n                accordion += '<p class=\"pt-2 m-0\">Your output: </p>';\n\n                if (results === null) {\n                    accordion += '<pre class=\"mt-1 mb-0 test-output\">Not run</pre>';\n                } else {\n                    accordion += '<pre class=\"pb-2 mt-1 mb-0 test-output\">' + results[i] + '</pre>';\n                }\n                accordion += '</div>';\n                accordion += '</div>';\n                accordion += '</details>';\n                accordion += '</div>';\n            }\n\n            accordion += '</div>';\n            return accordion;\n        },\n\n        /**\n         * Runs the tests on the given workspace and returns an array of booleans, one for each test, indicating whether\n         * the test passed or not\n         * @param {String} code the workspace to run the tests on\n         * @param {{}} tests the tests to run\n         * @returns {String[]} the output of each test\n         */\n        runTests: function(code, tests) {\n            let results = [];\n            tests.forEach((test) => {\n                let thisTestCode = code; // Need to copy, so that the code is not modified for the next test\n                const inputs = test.inputs;\n                inputs.forEach((input) => {\n                    const prompt = Object.keys(input)[0];\n                    const values = Object.values(input[prompt])[0];\n\n                    const inputIndex = thisTestCode.lastIndexOf(prompt);\n                    // Get the indexes of the first and second parentheses of the input function call\n                    const inputParentheses1 = thisTestCode.indexOf('(', inputIndex);\n                    const inputParentheses2 = thisTestCode.indexOf(')', inputParentheses1 + 1);\n\n                    const preStr = thisTestCode.substring(0, inputParentheses1 + 1);\n                    const postStr = thisTestCode.substring(inputParentheses2);\n\n                    thisTestCode = preStr + values[0] + postStr;\n                });\n                let codeOutput = this.silentRunCode(thisTestCode);\n                codeOutput = codeOutput.replace(/\\s/g, '');\n                results.push(codeOutput);\n            });\n            return results;\n        },\n\n        /**\n         * @param {String} code the code to check for input function calls\n         * @param {string} inputFuncDecs the function declarations for the forced input functions\n         * @returns {String[]} whether the code has all input function calls\n         */\n        getMissingInputCalls: function(code, inputFuncDecs) {\n\n            // Regex to match input function calls outside of comments\n            const regex = /((?!\\/\\/ ).{3}|^.{0,2})\\binput\\w+\\s*\\([^)]*\\)(?=\\s*;|\\s*\\)|\\s*[,)])/g;\n            const functionDecNames = extractFunctionNames(inputFuncDecs);\n            const matches = code.match(regex);\n\n            if (matches === null) {\n                return functionDecNames;\n            }\n            const functionCallNames = matches.map((match) => match.match(/\\b(\\w+)(?=\\s*\\()/g)).flat();\n\n            // Return all function declarations that are not called\n            return functionDecNames.filter((name) => !functionCallNames.includes(name));\n        },\n\n        /**\n         * @param {WorkspaceSvg} workspace the workspace to get the code from\n         * @param {string} inputFuncDecs\n         * @returns {CodeString} the code generated by Blockly for the current workspace\n         *\n         * Returns the Javascript code string generated by Blockly, with the necessary wrapping code\n         */\n        getWorkspaceCode: function(workspace, inputFuncDecs) {\n            javascript.javascriptGenerator.addReservedWords('print, input');\n            let codeString = new CodeString();\n\n            codeString.addAuxFunctions(inputFuncDecs);\n\n            const functionOpen = 'await (async () => {';\n            codeString.addLine(functionOpen);\n\n            let blocks = workspace.getTopBlocks(true);\n            for (let b = 0; b < blocks.length; b++) {\n                const block = blocks[b];\n                if (block.type === 'start') {\n                    codeString.addMainCode(generateDescendantsCode(block));\n                } else if (block.type === 'procedures_defnoreturn' || block.type === 'procedures_defreturn') {\n                    codeString.addFunction(generateFunctionCode(block));\n                }\n            }\n            codeString.addEnding();\n            return codeString;\n        },\n    };\n});\n"],"names":["define","CodeString","generateFunctionCode","block","Blockly","JavaScript","blockToCode","functionName","javascript","javascriptGenerator","nameDB_","getName","getFieldValue","Procedures","NAME_TYPE","substring","length","definitions_","generateDescendantsCode","descendantsCode","getChildren","forEach","child","extractFunctionNames","input","regex","functionNames","match","exec","push","silentRunCode","code","result","eval","formatCodeHTML","debugMode","arguments","undefined","getPrintableCodeString","getCompleteCodeString","testsAccordion","results","testsJSON","uncalledInputFuncs","testCaseCount","accordion","join","i","output","inputs","key","Object","values","runTests","tests","test","thisTestCode","prompt","keys","inputIndex","lastIndexOf","inputParentheses1","indexOf","inputParentheses2","preStr","postStr","codeOutput","replace","getMissingInputCalls","inputFuncDecs","functionDecNames","matches","functionCallNames","map","flat","filter","name","includes","getWorkspaceCode","workspace","addReservedWords","codeString","addAuxFunctions","functionOpen","addLine","blocks","getTopBlocks","b","type","addMainCode","addFunction","addEnding"],"mappings":"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"}