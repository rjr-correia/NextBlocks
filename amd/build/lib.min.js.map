{"version":3,"file":"lib.min.js","sources":["../src/lib.js"],"sourcesContent":["/**\n *\n * @module      mod_nextblocks/lib\n * @copyright   2023 Duarte Pereira<dg.pereira@campus.fct.unl.pt>\n * @license     https://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n/* globals Blockly */\n\n/* globals javascript */\n\ndefine(['mod_nextblocks/codestring'], function(CodeString) {\n    /**\n     * @param {BlockSvg} block the block whose code is to be generated\n     * @returns {string} the code generated by Blockly for the given block\n     */\n    function generateFunctionCode(block) {\n        Blockly.JavaScript.blockToCode(block);\n        // Get function name\n        let functionName = '%' + javascript.javascriptGenerator.nameDB_.getName(block.getFieldValue('NAME'),\n            Blockly.Procedures.NAME_TYPE);\n        functionName = functionName.substring(0, functionName.length - 1);\n        return javascript.javascriptGenerator.definitions_[functionName] + '\\n';\n    }\n\n    /**\n     * @param {BlockSvg} block the block whose descendants are to have their code generated\n     * @returns {string} the code generated by Blockly for the descendants of the given block\n     */\n    function generateDescendantsCode(block) {\n        let descendantsCode = '';\n        block.getChildren(true).forEach((child) => {\n            descendantsCode += Blockly.JavaScript.blockToCode(child);\n        });\n        return descendantsCode;\n    }\n\n    return {\n        /**\n         * @param {String} code The Javascript code to be run\n         * @returns {any} The output of the code\n         * Runs the code and returns the output, does not display it\n         * TODO: do something other than use eval\n         */\n        silentRunCode: async function(code) {\n            /* eslint-disable no-eval */\n            const result = await eval(code);\n            return typeof result === 'undefined' ? code : result;\n        },\n\n        /**\n         * Formats the code with correct HTML structure to be displayed in the code div\n         * TODO: implement this function\n         * @param {CodeString} code the code text to be formatted (string literal)\n         * @param {boolean} debugMode whether to display the code as is, or with the wrapper function\n         * @returns {string} the formatted code\n         */\n        formatCodeHTML: (code, debugMode = false) => {\n            if (!debugMode) {\n                return '<pre>' + code.getPrintableCodeString() + '</pre>';\n            } else {\n                return '<pre>' + code.getCompleteCodeString() + '</pre>';\n            }\n        },\n\n        /**\n         * Inserts the test results accordion in the area above the Run and Tests buttons\n         * @param {any[]|null} results the outputs of the tests\n         * @param {{}} testsJSON the tests that were run (for displaying the inputs and outputs)\n         * Note: if this is not empty, results is null\n         * @returns {string} the HTML for the accordion\n         */\n        testsAccordion: function(results, testsJSON) {\n            const testCaseCount = testsJSON.length;\n            let accordion = '<div class=\"d-flex flex-wrap\" style=\"max-height: 100%; overflow-y: auto;\">';\n\n            for (let i = 0; i < testCaseCount; i++) {\n                accordion += '<div class=\"card m-2\" style=\"flex: 1 1 calc(25% - 20px); min-width: 250px;\">';\n                accordion += '<details class=\"card-body\">';\n                accordion += '<summary class=\"card-header\" style=\"border-bottom: none;\">';\n                accordion += 'Test ' + (i + 1);\n\n                if (results === null || results[i] === undefined) {\n                    accordion += '<span class=\"badge badge-warning float-right\">Not run</span>';\n                } else if (results[i] === testsJSON[i].output) {\n                    accordion += '<span class=\"badge badge-success float-right\" style=\"color: green !important;\">Passed</span>';\n                } else {\n                    accordion += '<span class=\"badge badge-danger float-right\" style=\"color: red !important;\">Failed</span>';\n                }\n                accordion += '</summary>';\n\n                accordion += '<div class=\"pt-2\" style=\"background-color: white !important;\">';\n                /* eslint-disable no-loop-func */\n                testsJSON[i].inputs.forEach((input) => {\n                    const prompt = Object.keys(input)[0];\n                    const values = Object.values(input[prompt])[0];\n                    const combination = [prompt].concat(values);\n\n                    let inputString = \"\";\n                    for (const v of combination) {\n                        inputString += v;\n                        inputString += \"\\n\";\n                    }\n\n                    accordion += '<p class=\"pt-2 m-0\">Test Input: </p>';\n                    accordion += '<pre class=\"mt-1 mb-0 test-input\">' + inputString + '</pre>';\n                });\n                accordion += '<p class=\"pt-2 mt-2 mb-0\">Expected test output: </p>';\n                accordion += '<pre class=\"mt-1 mb-0 test-output\">' + testsJSON[i].output + '</pre>';\n                accordion += '<div class=\"p-0\">';\n                accordion += '<p class=\"pt-2 m-0\">Your output: </p>';\n\n                if (results === null) {\n                    accordion += '<pre class=\"mt-1 mb-0 test-output\">Not run</pre>';\n                } else {\n                    accordion += '<pre class=\"pb-2 mt-1 mb-0 test-output\">' + results[i] + '</pre>';\n                }\n                accordion += '</div>';\n                accordion += '</div>';\n                accordion += '</details>';\n                accordion += '</div>';\n            }\n\n            accordion += '</div>';\n            return accordion;\n        },\n\n        /**\n         * Runs the tests on the given workspace and returns an array of booleans, one for each test, indicating whether\n         * the test passed or not\n         * @param {String} code the workspace to run the tests on\n         * @param {{}} tests the tests to run\n         * @returns {String[]} the output of each test\n         */\n        runTests: async function(code, tests) {\n            let results = [];\n            code = code.replace(\"runningTests = false;\", \"runningTests = true;\");\n            for (const test of tests) {\n                let thisTestCode = code; // Need to copy, so that the code is not modified for the next test\n                const inputs = test.inputs;\n                for (const input of inputs) {\n                    const prompt = Object.keys(input)[0];\n                    const values = Object.values(input[prompt])[0];\n\n                    const combination = [prompt].concat(values);\n\n\n                    for (const v of combination) {\n                        const inputParentheses1 = thisTestCode.indexOf('await input(');\n                        if(inputParentheses1 != -1) {\n                            const inputParentheses2 = thisTestCode.indexOf('\\')', inputParentheses1);\n\n                            const preStr = thisTestCode.substring(0, inputParentheses1);\n                            const postStr = thisTestCode.substring(inputParentheses2+1);\n\n                            thisTestCode = preStr + '(' + v + postStr;\n                        }\n                    }\n\n                    //fill the rest of asks with empty strings\n                    /* eslint-disable-next-line no-constant-condition */\n                    while(true) {\n                        const inputParentheses1 = thisTestCode.indexOf('await input(');\n                        if(inputParentheses1 == -1){\n                            break;\n                        }\n                        const inputParentheses2 = thisTestCode.indexOf('\\')', inputParentheses1);\n\n                        const preStr = thisTestCode.substring(0, inputParentheses1);\n                        const postStr = thisTestCode.substring(inputParentheses2 + 1);\n\n                        thisTestCode = preStr + '(\"\"' + postStr;\n                    }\n\n\n                }\n                let codeOutput =  await this.silentRunCode(thisTestCode);\n                codeOutput = codeOutput.trim();\n                results.push(codeOutput);\n            }\n            return results;\n        },\n\n        /**\n         * @param {WorkspaceSvg} workspace the workspace to get the code from\n         * @param {string} inputFuncDecs\n         * @returns {CodeString} the code generated by Blockly for the current workspace\n         *\n         * Returns the Javascript code string generated by Blockly, with the necessary wrapping code\n         */\n        getWorkspaceCode: function(workspace, inputFuncDecs) {\n            javascript.javascriptGenerator.addReservedWords('print, input');\n            let codeString = new CodeString();\n\n            codeString.addAuxFunctions(inputFuncDecs);\n\n            const functionOpen = 'await (async () => {';\n            codeString.addLine(functionOpen);\n\n            let blocks = workspace.getTopBlocks(true);\n            for (let b = 0; b < blocks.length; b++) {\n                const block = blocks[b];\n                if (block.type === 'start') {\n                    codeString.addMainCode(generateDescendantsCode(block));\n                } else if (block.type === 'procedures_defnoreturn' || block.type === 'procedures_defreturn') {\n                    codeString.addFunction(generateFunctionCode(block));\n                }\n            }\n            codeString.addEnding();\n            return codeString;\n        },\n    };\n});\n"],"names":["define","CodeString","generateFunctionCode","block","Blockly","JavaScript","blockToCode","functionName","javascript","javascriptGenerator","nameDB_","getName","getFieldValue","Procedures","NAME_TYPE","substring","length","definitions_","generateDescendantsCode","descendantsCode","getChildren","forEach","child","silentRunCode","code","result","eval","formatCodeHTML","debugMode","arguments","undefined","getPrintableCodeString","getCompleteCodeString","testsAccordion","results","testsJSON","testCaseCount","accordion","i","output","inputs","input","prompt","Object","keys","values","combination","concat","inputString","v","runTests","tests","replace","test","thisTestCode","inputParentheses1","indexOf","inputParentheses2","preStr","postStr","codeOutput","trim","push","getWorkspaceCode","workspace","inputFuncDecs","addReservedWords","codeString","addAuxFunctions","functionOpen","addLine","blocks","getTopBlocks","b","type","addMainCode","addFunction","addEnding"],"mappings":"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"}