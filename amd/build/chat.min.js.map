{"version":3,"file":"chat.min.js","sources":["../src/chat.js"],"sourcesContent":["/**\n *\n * @module      mod_nextblocks/chat\n * @copyright   2025 Rui Correia<rjr.correia@campus.fct.unl.pt>\n * @copyright   based on work by 2024 Duarte Pereira<dg.pereira@campus.fct.unl.pt>\n * @license     https://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine([], function() {\n    return {\n        /**\n         *\n         * @param {string} userName username of the user\n         * @param {number} activityId id of the activity\n         * @param {function(string, string, number, number): void} saveMessage function to save the message in the database\n         * @param {string} serverUrl url of the chat server to connect to\n         * */\n        run: function(userName, activityId, saveMessage, serverUrl = 'ws://localhost:8060') {\n            const socket = new WebSocket(serverUrl);\n            socket.addEventListener(\"open\", () => chatSetup(socket, userName, activityId, saveMessage));\n            socket.addEventListener(\"message\", (event) => appendMessage(event.data, activityId));\n            // Socket.addEventListener(\"close\", () => socketError(activityId, \"Connection closed by server\"));\n            // socket.addEventListener(\"error\", () => socketError(activityId));\n        },\n\n        /**\n         * Populates the chat box with the last 100 messages from the database\n         * @param {function(number, number): Promise} getMessages function to fetch the messages from the database\n         * @param {number} activityId id of the activity\n         */\n        populate: function(getMessages, activityId) {\n            // Get last 100 messages from database\n            const messagesPromise = getMessages(100, activityId);\n\n            messagesPromise.then((messages) => {\n                // Add messages to chat box\n                messages.forEach((dbMessage) => {\n                    const message = {type: \"dbMessage\", sender: dbMessage.username, text: dbMessage.message, activity: activityId,\n                        timestamp: dbMessage.timestamp};\n                    appendMessage(message, activityId, true);\n                });\n                return;\n            });\n        },\n    };\n});\n\n// eslint-disable-next-line no-unused-vars\nconst socketError = function(activityId, errorMessage = \"Connection error\") {\n    const errorJSON = {type: \"error\", sender: \"System\", text: errorMessage, activity: activityId, timestamp: Date.now()};\n    appendMessage(errorJSON, activityId, true);\n};\n\n/**\n * Adds a message to the chat box\n * @param {string | {type: string, sender: string, text: string, activity: number, timestamp: number}} message message to append\n * @param {number} activityId id of the activity. If the message is not for this activity, it is not appended\n * @param {boolean} isParsed true if the message is already in JSON format, false otherwise\n * @throws {Error} if the message is not in a valid JSON format\n */\nconst appendMessage = function(message, activityId, isParsed = false) {\n    if (!isParsed) {\n        message = parseMessage(message);\n    }\n    if (activityId === message.activity) {\n        const chatDiv = document.getElementById('messages');\n        const timestampDate = new Date(message.timestamp);\n        chatDiv.innerHTML +=\n            `<p>(${String(timestampDate.getHours()).padStart(2, '0')}:${String(timestampDate.getMinutes()).padStart(2, '0')})\n            ${message.sender}: ${message.text}</p>`;\n    }\n};\n\n/**\n * Parses a message from a string to a JSON object\n * @param {string} message string to be parsed\n * @returns {{type: string, sender: string, text: string, activity: number, timestamp: number}}\n * @throws {Error} if the message is not in a valid JSON format\n */\nconst parseMessage = function(message) {\n    let msg;\n    try {\n        msg = JSON.parse(message);\n    } catch (e) {\n        throw new Error(\"Invalid message format\");\n    }\n    return msg;\n};\n\n/**\n * Sets up the listener for sending messages. Also stores the message in the database, using the saveMessage function.\n * @param {WebSocket} socket websocket object to send and receive messages\n * @param {string} userName username of the user\n * @param {number} activityId id of the activity\n * @param {function(string, string, number, number): void} saveMessage function to save the message in the database\n */\nconst chatSetup = function(socket, userName, activityId, saveMessage) {\n    const msgForm = document.querySelector('form.msg-form');\n\n    const msgFormSubmit = (event) => {\n        event.preventDefault();\n\n        const msgField = document.getElementById('msg');\n        const msgText = msgField.value;\n        const timestamp = Date.now();\n\n        // Store message in database. Ajax is asynchronous, so it might be faster to execute this before sending the message\n        saveMessage(msgText, userName, activityId, timestamp);\n\n        // Prepare and send message to websocket\n        let msg = {\n            type: \"normal\",\n            sender: userName,\n            text: msgText,\n            activity: activityId,\n            timestamp: timestamp\n        };\n        msg = JSON.stringify(msg);\n        socket.send(msg);\n\n        msgField.value = ''; // Clear message field in the form\n    };\n\n    msgForm.addEventListener('submit', (event) => msgFormSubmit(event, socket));\n};"],"names":["define","run","userName","activityId","saveMessage","serverUrl","arguments","length","undefined","socket","WebSocket","addEventListener","chatSetup","event","appendMessage","data","populate","getMessages","messagesPromise","then","messages","forEach","dbMessage","message","type","sender","username","text","activity","timestamp","socketError","errorMessage","errorJSON","Date","now","isParsed","parseMessage","chatDiv","document","getElementById","timestampDate","innerHTML","String","getHours","padStart","getMinutes","msg","JSON","parse","e","Error","msgForm","querySelector","msgFormSubmit","preventDefault","msgField","msgText","value","stringify","send"],"mappings":"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"}