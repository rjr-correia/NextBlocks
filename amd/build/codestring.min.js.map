{"version":3,"file":"codestring.min.js","sources":["../src/codestring.js"],"sourcesContent":["/**\n *\n * @module      mod_nextblocks/codestring\n * @copyright   2025 Duarte Pereira<dg.pereira@campus.fct.unl.pt>\n * @copyright   2025 Rui Correia<rjr.correia@campus.fct.unl.pt>\n * @license     https://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine([], function() {\n\n    class CodeString {\n        #codeString;\n        #userFunctionLinesCount;\n\n        static #auxFunctions =\n            `\nconst runningTests = false;\nconst testInputs = [];\nconst MAX_ITERATIONS = 10000;\nvar nextInput = 0;\nvar loopIterations = 0;\nvar error = \"\";\n\ncustomPrintln = function(string) {\n  outputString += string + '\\\\n';\n  updateTerminal();\n  return string;\n};\n\nupdateTerminal = function(){\n  if (runningTests) return;\n  const outputDiv = document.getElementById('output-div');\n  if (outputDiv) {\n    outputDiv.innerHTML = \"\";\n    const pre = document.createElement('pre');\n    pre.style.whiteSpace = 'pre-wrap'; \n    pre.textContent = outputString; \n    outputDiv.appendChild(pre);\n  }\n}\n\ntext_to_number = function(string){\n    let result = parseFloat(string);\n    if (isNaN(result)){\n        if (error.length == 0) error = \"Error: Cannot convert \"  + string + \" to a number.\";\n        return 0;\n    }\n    return result;\n}\n\nasync function input(promptText) {\n  if(error.length > 0) return \"\";\n  if(runningTests){\n    if(nextInput++ >= testInputs.length) return \"\";\n    return testInputs[nextInput-1];\n  }\n  const terminal = document.getElementById('output-div')\n  customPrintln(promptText);\n  const inputBox = document.createElement('input');\n  inputBox.setAttribute('id', 'input-box-inline');\n  \n  inputBox.style.backgroundColor = \"black\";\n  inputBox.style.color=\"white\";\n  \n  inputBox.style.display = 'inline-block';\n  inputBox.style.marginLeft = '5px';\n  inputBox.style.position = 'relative';\n  inputBox.style.top = '-40px'; \n  inputBox.style.left = ''+(promptText.length*7.5)+'px';\n  terminal.appendChild(inputBox);\n  inputBox.focus();\n\n  return new Promise((resolve) => {\n    const handleKeyDown = (e) => {\n      if (e.key === 'Enter') {\n        e.preventDefault();\n        inputBox.removeEventListener('keydown', handleKeyDown);\n        const answer = inputBox.value.trim();\n        terminal.removeChild(inputBox);\n        resolve(answer);\n      }\n    };\n    inputBox.addEventListener('keydown', handleKeyDown);\n  });\n}\n\n\n\n\n`;\n        static #codeEnding = `})();\n        if(nextInput > testInputs.length) return \\\"Error: Too many inputs\\\";\n        if(error.length > 0) return error;\n        return outputString;\n})();\n`;\n        constructor(codeString) {\n            if (arguments.length > 0) {\n                this.addAsyncDeclaration();\n                this.#codeString += codeString;\n                this.addVariable('outputString', '\"\"');\n            } else {\n                this.#codeString = '';\n                this.addAsyncDeclaration();\n                this.addVariable('outputString', '\"\"');\n\n\n            }\n            this.#userFunctionLinesCount = 0;\n        }\n\n        getCompleteCodeString() {\n            return this.#codeString;\n        }\n\n        getPrintableCodeString() {\n            // Split code by unescaped line breaks (code might have escaped line breaks)\n            const codeLines = this.#codeString\n                .replaceAll(\"customPrintln\", \"print\")\n                .replaceAll(\"text_to_number\", \"parseFloat\")\n                .split(/(?<!\\\\)\\n/);\n\n            // Add lines from user functions\n            //const functionLines = codeLines.slice(0, this.#userFunctionLinesCount);\n\n            // Add lines from start block\n            const startIndex = codeLines.findIndex(line => line.includes('await (async () => {')) + 1;\n            const endIndex = codeLines.findIndex(line => line.includes('})();'));\n            const startCodeLines = codeLines.slice(startIndex, endIndex);\n\n            return startCodeLines.join('\\n');\n        }\n\n        getSubmittableCodeString() {\n            // Replace return outputString; with process.stdout.write(outputString);\n            let lastIndex = this.#codeString.lastIndexOf('return outputString;');\n            return this.#codeString.substring(0, lastIndex) + 'process.stdout.write(outputString);' +\n                this.#codeString.substring(lastIndex + 'return outputString;'.length);\n        }\n\n        addVariable(variableName, variableValue) {\n            // Check if variableName is a valid variable name\n            const regex = /^[a-zA-Z_][a-zA-Z0-9_]*$/;\n            if (!regex.test(variableName)) {\n                throw new Error('Invalid variable name');\n            }\n            this.#codeString += 'let ' + variableName + ' = ' + variableValue + ';\\n';\n            return this.#codeString;\n        }\n\n        addAsyncDeclaration() {\n            this.#codeString += '(async () => {\\n';\n            return this.#codeString;\n        }\n\n        addLine(line) {\n            // Check if line does not have line break\n            if (line.includes('\\n')) {\n                throw new Error('Invalid line');\n            }\n            this.#codeString += line + '\\n';\n            return this.#codeString;\n        }\n\n        addEnding() {\n            this.#codeString += CodeString.#codeEnding;\n            return this.#codeString;\n        }\n\n        addAuxFunctions(inputFuncDecs) {\n            const auxFunctions = inputFuncDecs + CodeString.#auxFunctions;\n            this.#codeString += auxFunctions;\n            return this.#codeString;\n        }\n\n        addMainCode(codeString) {\n            this.#codeString += codeString;\n            return this.#codeString;\n        }\n\n        addFunction(functionCode) {\n            // Update user function lines count\n            const regex = /(?<!\\\\)\\n/g;\n            const functionLinesCount = (functionCode.match(regex) || []).length;\n            this.#userFunctionLinesCount += functionLinesCount;\n\n            this.#codeString = functionCode + this.#codeString;\n            return this.#codeString;\n        }\n    }\n    return CodeString;\n});\n"],"names":["define","CodeString","constructor","codeString","arguments","length","addAsyncDeclaration","addVariable","getCompleteCodeString","getPrintableCodeString","codeLines","replaceAll","split","startIndex","findIndex","line","includes","endIndex","startCodeLines","slice","join","getSubmittableCodeString","lastIndex","lastIndexOf","substring","variableName","variableValue","regex","test","Error","addLine","addEnding","addAuxFunctions","inputFuncDecs","auxFunctions","addMainCode","addFunction","functionCode","functionLinesCount","match"],"mappings":"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"}